#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC
db_type=$YNH_APP_ARG_DB_TYPE

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --time --weight=1

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --time --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=db_type --value=$db_type
ynh_app_setting_set --app=$app --key=final_path --value=$final_path

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --time --weight=1

# Find an available port
port=$(ynh_find_port --port=8095)
ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --time --weight=1

ynh_install_app_dependencies $pkg_dependencies

if [ $db_type = "mysql" ]
then
	ynh_install_app_dependencies python3-mysqldb libmariadbclient-dev
elif [ $db_type = "postgresql" ]
then
	ynh_install_app_dependencies postgresql python3-psycopg2 libpq-dev
elif [ $db_type = "sqlite" ]
then
	ynh_install_app_dependencies sqlite3
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --time --weight=1

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# CREATE A DATABASE
#=================================================

if [ $db_type = "mysql" ]
then

	ynh_script_progression --message="Creating a MySQL database..." --time --weight=1

	db_name=$(ynh_sanitize_dbid --db_name=$app)
	db_user=$db_name
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
	ynh_mysql_setup_db --db_user=$db_user --db_name=$db_name

elif [ $db_type = "postgresql" ]
then

	ynh_script_progression --message="Creating a PostgreSQL database..." --time --weight=1

	db_name=$(ynh_sanitize_dbid --db_name=$app)
	db_user=$db_name
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
	ynh_psql_setup_db --db_user=$db_user --db_name=$db_name

else

	ynh_script_progression --message="Skipping database..." --time --weight=1

fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --time --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE A PYTHON VIRTUALENV
#=================================================

mkdir -p $final_path
pushd $final_path
python3 -m venv --system-site-packages venv
set +o nounset
. venv/bin/activate
set -o nounset
pip install --upgrade Flask
pip install --upgrade Flask-SQLAlchemy
pip install --upgrade flask-login
pip install --upgrade gunicorn
#psycopg2 driver for sqlalchemy postgresql dialect
if [ "$db_type" = 'postgresql' ]; then pip install --upgrade psycopg2; fi
set +o nounset
deactivate
set -o nounset
popd

chown $app:www-data -R "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# COPY TEMPLATE FILES
#=================================================

cp -r ../sources/* $final_path/
#chmod u=rwX,g=rX,o= -R $final_path
chown $app:www-data -R $final_path

#=================================================
# CREATE DATA DIRECTORY
#=================================================
ynh_script_progression --message="Creating a data directory..." --time --weight=1

datadir=/home/yunohost.app/$app
ynh_app_setting_set --app=$app --key=datadir --value=$datadir

mkdir -p $datadir

chmod 750 "$datadir"
chmod -R o-rwx "$datadir"
chown -R $app:www-data "$datadir"

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding configuration files..." --time --weight=1

ynh_add_config --template="settings.py" --destination="$final_path/app/settings_local.py"
ynh_add_config --template="gunicorn.py" --destination="$final_path/gunicorn.py"

chmod 400 "$final_path/app/settings_local.py"
chown $app:$app "$final_path/app/settings_local.py"

secret_key=$(python3 -c "import secrets; print(secrets.token_hex(16))")
ynh_replace_string --match_string="_SECRET_KEY_" --replace_string="$secret_key" --target_file="$final_path/app/settings_local.py"

if [ $db_type = "mysql" ]
then
	db_host="$db_user:$db_pwd@localhost"
	ynh_replace_string --match_string="_DB_TYPE_" --replace_string="mysql" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_HOST_" --replace_string="$db_host" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_NAME_" --replace_string="$db_name" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_USER_" --replace_string="$db_user" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_PASSWORD_" --replace_string="$db_pwd" --target_file="$final_path/app/settings_local.py"
	ynh_store_file_checksum --file="$final_path/app/settings_local.py"
elif [ $db_type = "postgresql" ]
then
	db_host="$db_user:$db_pwd@localhost"
	ynh_replace_string --match_string="_DB_TYPE_" --replace_string="postgresql" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_HOST_" --replace_string="$db_host" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_NAME_" --replace_string="$db_name" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_USER_" --replace_string="$db_user" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_PASSWORD_" --replace_string="$db_pwd" --target_file="$final_path/app/settings_local.py"
	ynh_store_file_checksum --file="$final_path/app/settings_local.py"
elif [ $db_type = "sqlite" ]
then
	ynh_replace_string --match_string="_DB_TYPE_" --replace_string="sqlite" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_HOST_" --replace_string="" --target_file="$final_path/app/settings_local.py"
	ynh_replace_string --match_string="_DB_NAME_" --replace_string="$final_path/sqlite.db" --target_file="$final_path/app/settings_local.py"
else
	db_host=""
	ynh_store_file_checksum --file="$final_path/app/settings_local.py"
fi

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE DATABASE
#=================================================

# pushd $final_path
# set +o nounset
# . venv/bin/activate
# set -o nounset
# python -c "from app import db, create_app; app = create_app(); app.app_context().push(); db.create_all()"
# set +o nounset
# deactivate
# set -o nounset
# popd

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --time --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --time --weight=1

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

mkdir -p "/var/log/$app/"
chown -R $app:adm "/var/log/$app/"

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --time --weight=1

yunohost service add $app --description="Flask Template app" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --time --weight=1

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# SETUP FAIL2BAN
#=================================================
ynh_script_progression --message="Configuring Fail2Ban..." --time --weight=1

# Create a dedicated Fail2Ban config
# ynh_add_fail2ban_config --logpath="/var/log/nginx/${domain}-error.log" --failregex="Regex to match into the log for a failed login"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring permissions..." --time --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# Everyone can access the app.
	# The "main" permission is automatically created before the install script.
	ynh_permission_update --permission="main" --add="visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --time --last
